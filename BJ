# Блек-джек
# От 1 до 7 игроков против дилера
import cards
import games


class Cardb(cards.Card):
    """ Карта для игры в Блек-джек."""
    ace = 1

    @property
    def value(self):
        if self.is_face_up:
            v = Cardb.RANKS.index(self.rank) + 1
            if v > 10:
                v = 10
        else:
            v = None
        return v


class BJDeck(cards.Deck):
    """Колода для игры в "Блек-джек"."""
    def populate(self):
        for suit in Cardb.SUITS:
            for rank in Cardb.RANKS:
                self.cards.append(Cardb(rank, suit))


class BJHand(cards.Hand):
    """ 'Рука': набор карт "Блек-джека" у одного игрока."""
    def __init__(self, name):
        super(BJHand, self).__init__()
        self.name = name

    def __str__(self):
        rep = self.name + ":\t" + super(BJHand, self).__str__()
        if self.total:
            rep += "(" + str(self.total) + ")"
        return rep

    @property
    def total(self):
        # если у одной из карт value равно None. то и все свойство равно None
        for card in self.cards:
            if not card.value:
                return None
        # суммируем очки. считая каждый туз за 1 очко
        t = 0
        for card in self.cards:
            t += card.value
        con = False
        for card in self.cards:
            if card.value == Cardb.ace:
                con = True
        # если на руках есть туз и сумма очков не превышает 11. будем считать туз за 11
        if (con and t) <= 11:
            # прибавить нужно лишь 10. потому что единица уже вошла в общую сумму
            t += 10
        return t

    def is_busted(self):
        return self.total > 21


class BJPlayer(BJHand):
    """Игрок в "Блек-джек"."""
    def is_hitting(self):
        response = games.ask_yes_no("\n" + self.name + "будете брать еще карты? (Y/N): ")
        return response == "у"

    def bust(self):
        print(self.name, "перебрал.")
        self.lose()

    def lose(self):
        print(self.name, "проиграл.")

    def win(self):
        print(self.name, "выиграл.")

    def push(self):
        print(self.name, "сыграл с компьютером вничью.")


class BJDealer(BJHand):
    """Дилер в игре "Блек-джек"."""
    def is_hitting(self):
        return self.total < 17

    def bust(self):
        print(self.name, "перебрал.")

    def flip_first_card(self):
        first_card = self.cards[0]
        first_card.flip()


class BJGame(object):
    """ Игра в Блек-джек. """
    def __init__(self, names):
        self.players = []
        for name in names:
            player = BJPlayer(name)
            self.players.append(player)
        self.dealer = BJDealer("Dealer")
        self.deck = BJDeck()
        self.deck.populate()
        self.deck.shuffle()

    @property
    def still_playing(self):
        sp = []
        for player in self.players:
            if not player.is_busted():
                sp.append(player)
        return sp

    def __additional_cards(self, player):
        while not player.is_busted() and player.is_hitting():
            self.deck.deal([player])
            print(player)
            if player.is_busted():
                player.bust()

    def play(self):
        # сдача всем по 2 карты
        self.deck.deal(self.players + [self.dealer], per_hand=2)
        self.dealer.flip_first_card()  # первая из карт. сданных дилеру. переворачивается рубашкой вверх
        for player in self.players:
            print(player)
        print(self.dealer)
        # сдача дополнительных карт игрокам
        for player in self.players:
            self.__additional_cards(player)
        self.dealer.flip_first_card()  # первая карта дилера раскрывается
        if not self.still_playing:
            # все игроки Перебрали. покажем только "руку" дилера
            print(self.dealer)
        else:
            # сдача дополнительных карт дилеру
            print(self.dealer)
            self.__additional_cards(self.dealer)
            if self.dealer.is_busted():
                # выигрывают все.-кто еще остался в игре
                for player in self.still_playing:
                    player.win()
            else:
                # сравниваем суммы очков у дилера и у игроков. оставшихся в игре
                for player in self.still_playing:
                    if player.total > self.dealer.total:
                        player.win()
                    elif player.total < self.dealer.total:
                        player.lose()
                    else:
                        player.push()
                        # удаление всех карт
        for player in self.players:
            player.clear()
        self.dealer.clear()


def main():
    print("\t\tдобро пожаловать за игровой стол Блек-джека!\n")
    names = []
    number = games.ask(" сколько всего игроков? (1 -  7): ", low=1, high=8)
    for i in range(number):
        name = input("Введите имя игрока: ")
        names.append(name)
        print()
    game = BJGame(names)
    again = None
    while again != "n":
        game.play()
        again = games.ask_yes_no("\nхотите сыграть еще раз? ")
main()
input("\n\nНажмите Enter. чтобы выйти.")
